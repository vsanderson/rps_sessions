{"changed":true,"filter":false,"title":"game.rb","tooltip":"/bin/game.rb","value":"require 'sinatra'\n\nset :static, true\nset :public_folder, \"static\"\nset :views, \"views\"\n\nenable :sessions\n\n# before we process a route, we'll set the response as\n# plain text and set up an array of viable moves that\n# a player (and the computer) can perform\nbefore do\n  #content_type :txt\n  @defeat = {rock: :scissors, paper: :rock, scissors: :paper}\n  @throws = @defeat.keys\nend\n\nget '/' do \n    erb :move\nend\n\n\npost '/throw/' do\n  # the params[] hash stores querystring and form data.\n  player_throw = params[\"throw\"].to_sym\n\n  # in the case of a player providing a throw that is not valid,\n  # we halt with a status code of 403 (Forbidden) and let them\n  # know they need to make a valid throw to play.\n  if !@throws.include?(player_throw)\n    halt 403, \"You must throw one of the following: #{@throws}\"\n  end\n\n  # now we can select a random throw for the computer\n  computer_throw = @throws.sample\n\n  # compare the player and computer throws to determine a winner\n  if player_throw == computer_throw\n     session[:ties] = 1\n    \"You tied with the computer. Try again!\"\n  elsif computer_throw == @defeat[player_throw]\n    session[:wins] = 1\n    \"Nicely done; #{player_throw} beats #{computer_throw}! You've won #{session[:wins]} times\"\n     erb :index\n  else\n    session[:losses] = 1\n    \"Ouch; #{computer_throw} beats #{player_throw}. Better luck next time!\"\n  end\nend","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":48,"column":3},"action":"insert","lines":["require 'sinatra'","","set :static, true","set :public_folder, \"static\"","set :views, \"views\"","","enable :sessions","","# before we process a route, we'll set the response as","# plain text and set up an array of viable moves that","# a player (and the computer) can perform","before do","  #content_type :txt","  @defeat = {rock: :scissors, paper: :rock, scissors: :paper}","  @throws = @defeat.keys","end","","get '/' do ","    erb :move","end","","","post '/throw/' do","  # the params[] hash stores querystring and form data.","  player_throw = params[\"throw\"].to_sym","","  # in the case of a player providing a throw that is not valid,","  # we halt with a status code of 403 (Forbidden) and let them","  # know they need to make a valid throw to play.","  if !@throws.include?(player_throw)","    halt 403, \"You must throw one of the following: #{@throws}\"","  end","","  # now we can select a random throw for the computer","  computer_throw = @throws.sample","","  # compare the player and computer throws to determine a winner","  if player_throw == computer_throw","     session[:ties] = 1","    \"You tied with the computer. Try again!\"","  elsif computer_throw == @defeat[player_throw]","    session[:wins] = 1","    \"Nicely done; #{player_throw} beats #{computer_throw}! You've won #{session[:wins]} times\"","     erb :index","  else","    session[:losses] = 1","    \"Ouch; #{computer_throw} beats #{player_throw}. Better luck next time!\"","  end","end"],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":0},"end":{"row":4,"column":19},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1538408854099}